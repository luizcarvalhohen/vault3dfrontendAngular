// package: 
// file: messages-cosmos.proto

import * as jspb from "google-protobuf";
import * as types_pb from "./types_pb";

export class CosmosGetAddress extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasShowDisplay(): boolean;
  clearShowDisplay(): void;
  getShowDisplay(): boolean | undefined;
  setShowDisplay(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosGetAddress.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosGetAddress): CosmosGetAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosGetAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosGetAddress;
  static deserializeBinaryFromReader(message: CosmosGetAddress, reader: jspb.BinaryReader): CosmosGetAddress;
}

export namespace CosmosGetAddress {
  export type AsObject = {
    addressNList: Array<number>,
    showDisplay?: boolean,
  }
}

export class CosmosAddress extends jspb.Message {
  hasAddress(): boolean;
  clearAddress(): void;
  getAddress(): string | undefined;
  setAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosAddress.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosAddress): CosmosAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosAddress;
  static deserializeBinaryFromReader(message: CosmosAddress, reader: jspb.BinaryReader): CosmosAddress;
}

export namespace CosmosAddress {
  export type AsObject = {
    address?: string,
  }
}

export class CosmosSignTx extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasAccountNumber(): boolean;
  clearAccountNumber(): void;
  getAccountNumber(): string | undefined;
  setAccountNumber(value: string): void;

  hasChainId(): boolean;
  clearChainId(): void;
  getChainId(): string | undefined;
  setChainId(value: string): void;

  hasFeeAmount(): boolean;
  clearFeeAmount(): void;
  getFeeAmount(): number | undefined;
  setFeeAmount(value: number): void;

  hasGas(): boolean;
  clearGas(): void;
  getGas(): number | undefined;
  setGas(value: number): void;

  hasMemo(): boolean;
  clearMemo(): void;
  getMemo(): string | undefined;
  setMemo(value: string): void;

  hasSequence(): boolean;
  clearSequence(): void;
  getSequence(): string | undefined;
  setSequence(value: string): void;

  hasMsgCount(): boolean;
  clearMsgCount(): void;
  getMsgCount(): number | undefined;
  setMsgCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosSignTx.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosSignTx): CosmosSignTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosSignTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosSignTx;
  static deserializeBinaryFromReader(message: CosmosSignTx, reader: jspb.BinaryReader): CosmosSignTx;
}

export namespace CosmosSignTx {
  export type AsObject = {
    addressNList: Array<number>,
    accountNumber?: string,
    chainId?: string,
    feeAmount?: number,
    gas?: number,
    memo?: string,
    sequence?: string,
    msgCount?: number,
  }
}

export class CosmosMsgRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosMsgRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosMsgRequest): CosmosMsgRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosMsgRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosMsgRequest;
  static deserializeBinaryFromReader(message: CosmosMsgRequest, reader: jspb.BinaryReader): CosmosMsgRequest;
}

export namespace CosmosMsgRequest {
  export type AsObject = {
  }
}

export class CosmosMsgAck extends jspb.Message {
  hasSend(): boolean;
  clearSend(): void;
  getSend(): CosmosMsgSend | undefined;
  setSend(value?: CosmosMsgSend): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosMsgAck.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosMsgAck): CosmosMsgAck.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosMsgAck, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosMsgAck;
  static deserializeBinaryFromReader(message: CosmosMsgAck, reader: jspb.BinaryReader): CosmosMsgAck;
}

export namespace CosmosMsgAck {
  export type AsObject = {
    send?: CosmosMsgSend.AsObject,
  }
}

export class CosmosMsgSend extends jspb.Message {
  hasFromAddress(): boolean;
  clearFromAddress(): void;
  getFromAddress(): string | undefined;
  setFromAddress(value: string): void;

  hasToAddress(): boolean;
  clearToAddress(): void;
  getToAddress(): string | undefined;
  setToAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  hasAddressType(): boolean;
  clearAddressType(): void;
  getAddressType(): types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap] | undefined;
  setAddressType(value: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap]): void;

  hasExchangeType(): boolean;
  clearExchangeType(): void;
  getExchangeType(): types_pb.ExchangeType | undefined;
  setExchangeType(value?: types_pb.ExchangeType): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosMsgSend.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosMsgSend): CosmosMsgSend.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosMsgSend, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosMsgSend;
  static deserializeBinaryFromReader(message: CosmosMsgSend, reader: jspb.BinaryReader): CosmosMsgSend;
}

export namespace CosmosMsgSend {
  export type AsObject = {
    fromAddress?: string,
    toAddress?: string,
    amount?: string,
    addressType?: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap],
    exchangeType?: types_pb.ExchangeType.AsObject,
  }
}

export class CosmosSignedTx extends jspb.Message {
  hasPublicKey(): boolean;
  clearPublicKey(): void;
  getPublicKey(): Uint8Array | string;
  getPublicKey_asU8(): Uint8Array;
  getPublicKey_asB64(): string;
  setPublicKey(value: Uint8Array | string): void;

  hasSignature(): boolean;
  clearSignature(): void;
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CosmosSignedTx.AsObject;
  static toObject(includeInstance: boolean, msg: CosmosSignedTx): CosmosSignedTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CosmosSignedTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CosmosSignedTx;
  static deserializeBinaryFromReader(message: CosmosSignedTx, reader: jspb.BinaryReader): CosmosSignedTx;
}

export namespace CosmosSignedTx {
  export type AsObject = {
    publicKey: Uint8Array | string,
    signature: Uint8Array | string,
  }
}

