// source: messages-tendermint.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function(){ return this }).call(null);

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.TendermintAddress', null, global);
goog.exportSymbol('proto.TendermintGetAddress', null, global);
goog.exportSymbol('proto.TendermintMsgAck', null, global);
goog.exportSymbol('proto.TendermintMsgRequest', null, global);
goog.exportSymbol('proto.TendermintMsgSend', null, global);
goog.exportSymbol('proto.TendermintSignTx', null, global);
goog.exportSymbol('proto.TendermintSignedTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintGetAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TendermintGetAddress.repeatedFields_, null);
};
goog.inherits(proto.TendermintGetAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintGetAddress.displayName = 'proto.TendermintGetAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TendermintAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintAddress.displayName = 'proto.TendermintAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TendermintSignTx.repeatedFields_, null);
};
goog.inherits(proto.TendermintSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintSignTx.displayName = 'proto.TendermintSignTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TendermintMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintMsgRequest.displayName = 'proto.TendermintMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintMsgAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TendermintMsgAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintMsgAck.displayName = 'proto.TendermintMsgAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintMsgSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TendermintMsgSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintMsgSend.displayName = 'proto.TendermintMsgSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TendermintSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TendermintSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TendermintSignedTx.displayName = 'proto.TendermintSignedTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TendermintGetAddress.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintGetAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintGetAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintGetAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintGetAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    addressPrefix: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    chainName: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintGetAddress}
 */
proto.TendermintGetAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintGetAddress;
  return proto.TendermintGetAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintGetAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintGetAddress}
 */
proto.TendermintGetAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDisplay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressPrefix(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintGetAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintGetAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintGetAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintGetAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.TendermintGetAddress.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bool show_display = 2;
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.getShowDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.setShowDisplay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.clearShowDisplay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.hasShowDisplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool testnet = 3;
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string address_prefix = 4;
 * @return {string}
 */
proto.TendermintGetAddress.prototype.getAddressPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.setAddressPrefix = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.clearAddressPrefix = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.hasAddressPrefix = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string chain_name = 5;
 * @return {string}
 */
proto.TendermintGetAddress.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.setChainName = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintGetAddress} returns this
 */
proto.TendermintGetAddress.prototype.clearChainName = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintGetAddress.prototype.hasChainName = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintAddress}
 */
proto.TendermintAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintAddress;
  return proto.TendermintAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintAddress}
 */
proto.TendermintAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.TendermintAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintAddress} returns this
 */
proto.TendermintAddress.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintAddress} returns this
 */
proto.TendermintAddress.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TendermintSignTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    accountNumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chainId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    feeAmount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    gas: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    sequence: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    msgCount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    decimals: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    chainName: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    messageTypePrefix: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintSignTx}
 */
proto.TendermintSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintSignTx;
  return proto.TendermintSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintSignTx}
 */
proto.TendermintSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeeAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequence(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgCount(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimals(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageTypePrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.TendermintSignTx.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional uint64 account_number = 2;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setAccountNumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearAccountNumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasAccountNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 fee_amount = 4;
 * @return {number}
 */
proto.TendermintSignTx.prototype.getFeeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setFeeAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearFeeAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasFeeAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.TendermintSignTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setGas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearGas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasGas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 sequence = 7;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setSequence = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearSequence = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 msg_count = 8;
 * @return {number}
 */
proto.TendermintSignTx.prototype.getMsgCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setMsgCount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearMsgCount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasMsgCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool testnet = 9;
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string denom = 10;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 decimals = 11;
 * @return {number}
 */
proto.TendermintSignTx.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setDecimals = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearDecimals = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasDecimals = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string chain_name = 12;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setChainName = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearChainName = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasChainName = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string message_type_prefix = 13;
 * @return {string}
 */
proto.TendermintSignTx.prototype.getMessageTypePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.setMessageTypePrefix = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignTx} returns this
 */
proto.TendermintSignTx.prototype.clearMessageTypePrefix = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignTx.prototype.hasMessageTypePrefix = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintMsgRequest}
 */
proto.TendermintMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintMsgRequest;
  return proto.TendermintMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintMsgRequest}
 */
proto.TendermintMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintMsgAck.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintMsgAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintMsgAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    send: (f = msg.getSend()) && proto.TendermintMsgSend.toObject(includeInstance, f),
    denom: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chainName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    messageTypePrefix: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintMsgAck}
 */
proto.TendermintMsgAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintMsgAck;
  return proto.TendermintMsgAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintMsgAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintMsgAck}
 */
proto.TendermintMsgAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TendermintMsgSend;
      reader.readMessage(value,proto.TendermintMsgSend.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageTypePrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintMsgAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintMsgAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintMsgAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TendermintMsgSend.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional TendermintMsgSend send = 1;
 * @return {?proto.TendermintMsgSend}
 */
proto.TendermintMsgAck.prototype.getSend = function() {
  return /** @type{?proto.TendermintMsgSend} */ (
    jspb.Message.getWrapperField(this, proto.TendermintMsgSend, 1));
};


/**
 * @param {?proto.TendermintMsgSend|undefined} value
 * @return {!proto.TendermintMsgAck} returns this
*/
proto.TendermintMsgAck.prototype.setSend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.clearSend = function() {
  return this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgAck.prototype.hasSend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.TendermintMsgAck.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgAck.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chain_name = 3;
 * @return {string}
 */
proto.TendermintMsgAck.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.setChainName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.clearChainName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgAck.prototype.hasChainName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string message_type_prefix = 4;
 * @return {string}
 */
proto.TendermintMsgAck.prototype.getMessageTypePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.setMessageTypePrefix = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgAck} returns this
 */
proto.TendermintMsgAck.prototype.clearMessageTypePrefix = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgAck.prototype.hasMessageTypePrefix = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintMsgSend.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintMsgSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintMsgSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    toAddress: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    addressType: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    exchangeType: (f = msg.getExchangeType()) && types_pb.ExchangeType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintMsgSend}
 */
proto.TendermintMsgSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintMsgSend;
  return proto.TendermintMsgSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintMsgSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintMsgSend}
 */
proto.TendermintMsgSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {!proto.OutputAddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    case 10:
      var value = new types_pb.ExchangeType;
      reader.readMessage(value,types_pb.ExchangeType.deserializeBinaryFromReader);
      msg.setExchangeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintMsgSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintMsgSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintMsgSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintMsgSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = /** @type {!proto.OutputAddressType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getExchangeType();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      types_pb.ExchangeType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from_address = 6;
 * @return {string}
 */
proto.TendermintMsgSend.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.setFromAddress = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.clearFromAddress = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgSend.prototype.hasFromAddress = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string to_address = 7;
 * @return {string}
 */
proto.TendermintMsgSend.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.setToAddress = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.clearToAddress = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgSend.prototype.hasToAddress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 amount = 8;
 * @return {string}
 */
proto.TendermintMsgSend.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgSend.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OutputAddressType address_type = 9;
 * @return {!proto.OutputAddressType}
 */
proto.TendermintMsgSend.prototype.getAddressType = function() {
  return /** @type {!proto.OutputAddressType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.OutputAddressType} value
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.setAddressType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.clearAddressType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgSend.prototype.hasAddressType = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ExchangeType exchange_type = 10;
 * @return {?proto.ExchangeType}
 */
proto.TendermintMsgSend.prototype.getExchangeType = function() {
  return /** @type{?proto.ExchangeType} */ (
    jspb.Message.getWrapperField(this, types_pb.ExchangeType, 10));
};


/**
 * @param {?proto.ExchangeType|undefined} value
 * @return {!proto.TendermintMsgSend} returns this
*/
proto.TendermintMsgSend.prototype.setExchangeType = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TendermintMsgSend} returns this
 */
proto.TendermintMsgSend.prototype.clearExchangeType = function() {
  return this.setExchangeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintMsgSend.prototype.hasExchangeType = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TendermintSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.TendermintSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TendermintSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TendermintSignedTx}
 */
proto.TendermintSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TendermintSignedTx;
  return proto.TendermintSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TendermintSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TendermintSignedTx}
 */
proto.TendermintSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TendermintSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TendermintSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TendermintSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TendermintSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TendermintSignedTx.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.TendermintSignedTx.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.TendermintSignedTx.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TendermintSignedTx} returns this
 */
proto.TendermintSignedTx.prototype.setPublicKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignedTx} returns this
 */
proto.TendermintSignedTx.prototype.clearPublicKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignedTx.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.TendermintSignedTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.TendermintSignedTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.TendermintSignedTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TendermintSignedTx} returns this
 */
proto.TendermintSignedTx.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.TendermintSignedTx} returns this
 */
proto.TendermintSignedTx.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TendermintSignedTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
