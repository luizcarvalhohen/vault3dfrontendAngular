"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cosmosGetAddress = exports.cosmosSignTx = exports.cosmosGetAccountPaths = void 0;
const CosmosMessages = __importStar(require("@keepkey/device-protocol/lib/messages-cosmos_pb"));
const Messages = __importStar(require("@keepkey/device-protocol/lib/messages_pb"));
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const lodash_1 = __importDefault(require("lodash"));
function cosmosGetAccountPaths(msg) {
    return [
        {
            addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin("Atom"), 0x80000000 + msg.accountIdx, 0, 0],
        },
    ];
}
exports.cosmosGetAccountPaths = cosmosGetAccountPaths;
function cosmosSignTx(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
            const signTx = new CosmosMessages.CosmosSignTx();
            signTx.setAddressNList(msg.addressNList);
            signTx.setAccountNumber(msg.account_number);
            signTx.setChainId(msg.chain_id);
            signTx.setFeeAmount(parseInt(msg.tx.fee.amount[0].amount));
            signTx.setGas(parseInt(msg.tx.fee.gas));
            signTx.setSequence(msg.sequence);
            if (msg.tx.memo !== undefined)
                signTx.setMemo(msg.tx.memo);
            signTx.setMsgCount(1);
            let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSSIGNTX, signTx, core.LONG_TIMEOUT, 
            /*omitLock=*/ true);
            if (resp.message_type === core.Events.FAILURE)
                throw resp;
            for (let m of msg.tx.msg) {
                if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_COSMOSMSGREQUEST) {
                    throw new Error(`cosmos: unexpected response ${resp.message_type}`);
                }
                let ack;
                if (m.type === "cosmos-sdk/MsgSend") {
                    if (m.value.amount.length !== 1) {
                        throw new Error("cosmos: Multiple amounts per msg not supported");
                    }
                    const denom = m.value.amount[0].denom;
                    if (denom !== "uatom") {
                        throw new Error("cosmos: Unsupported denomination: " + denom);
                    }
                    const send = new CosmosMessages.CosmosMsgSend();
                    send.setFromAddress(m.value.from_address);
                    send.setToAddress(m.value.to_address);
                    send.setAmount(m.value.amount[0].amount);
                    ack = new CosmosMessages.CosmosMsgAck();
                    ack.setSend(send);
                }
                else {
                    throw new Error(`cosmos: Message ${m.type} is not yet supported`);
                }
                resp = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSMSGACK, ack, core.LONG_TIMEOUT, /*omitLock=*/ true);
                if (resp.message_type === core.Events.FAILURE)
                    throw resp;
            }
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_COSMOSSIGNEDTX) {
                throw new Error(`cosmos: unexpected response ${resp.message_type}`);
            }
            const signedTx = resp.proto;
            const signed = lodash_1.default.cloneDeep(msg.tx);
            signed.signatures = [
                {
                    pub_key: {
                        type: "tendermint/PubKeySecp256k1",
                        value: signedTx.getPublicKey_asB64(),
                    },
                    signature: signedTx.getSignature_asB64(),
                },
            ];
            return signed;
        }));
    });
}
exports.cosmosSignTx = cosmosSignTx;
function cosmosGetAddress(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new CosmosMessages.CosmosGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_COSMOSGETADDRESS, getAddr, core.LONG_TIMEOUT);
        if (response.message_type === core.Events.FAILURE)
            throw response;
        const cosmosAddress = response.proto;
        return core.mustBeDefined(cosmosAddress.getAddress());
    });
}
exports.cosmosGetAddress = cosmosGetAddress;
//# sourceMappingURL=cosmos.js.map