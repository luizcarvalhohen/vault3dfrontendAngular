{"version":3,"file":"base-eth-keyring.cjs.development.js","sources":["../src/BaseKeyring.ts"],"sourcesContent":["import HDKey from 'hdkey';\nimport { toChecksumAddress, publicToAddress, BN, stripHexPrefix } from 'ethereumjs-util';\nimport { Transaction } from '@ethereumjs/tx';\nimport { DataType, EthSignRequest } from '@keystonehq/bc-ur-registry-eth';\nimport * as uuid from 'uuid';\nimport { InteractionProvider } from './InteractionProvider';\n\nconst keyringType = 'QR Hardware Wallet Device';\nconst pathBase = 'm';\nconst MAX_INDEX = 1000;\n\nexport type StoredKeyring = {\n    xfp: string;\n    xpub: string;\n    hdPath: string;\n    accounts: string[];\n    currentAccount: number;\n    page: number;\n    perPage: number;\n    paths: Record<string, number>;\n};\n\nexport type PagedAccount = { address: string; balance: any; index: number };\n\nexport class BaseKeyring {\n    getInteraction = (): InteractionProvider => {\n        throw new Error(\n            '#ktek_error, method getInteraction not implemented, please extend BaseKeyring by overwriting this method.',\n        );\n    };\n    static type = keyringType;\n    protected xfp: string;\n    protected type = keyringType;\n    protected xpub: string;\n    protected hdPath: string;\n    protected accounts: string[];\n    protected currentAccount: number;\n    protected page: number;\n    protected perPage: number;\n    protected paths: Record<string, number>;\n    protected hdk: HDKey;\n    protected latestAccount: number;\n\n    constructor(opts?: StoredKeyring) {\n        this.xfp = '';\n        this.xpub = '';\n        this.hdPath = '';\n        this.page = 0;\n        this.perPage = 5;\n        this.accounts = [];\n        this.currentAccount = 0;\n        this.paths = {};\n        this.latestAccount = 0;\n        this.deserialize(opts);\n    }\n\n    private readKeyringCryptoHDKey = async (): Promise<{ xfp: string; xpub: string; hdPath: string }> => {\n        const cryptoHDKey = await this.getInteraction().readCryptoHDKey();\n        const hdPath = `m/${cryptoHDKey.getOrigin().getPath()}`;\n        const xfp = cryptoHDKey.getOrigin().getSourceFingerprint()?.toString('hex');\n        if (!xfp) {\n            throw new Error('invalid crypto-hd-key, cannot get source fingerprint');\n        }\n        const xpub = cryptoHDKey.getBip32Key();\n        return {\n            xfp,\n            xpub,\n            hdPath,\n        };\n    };\n\n    protected requestSignature = async (\n        _requestId: string,\n        signRequest: EthSignRequest,\n        requestTitle?: string,\n        requestDescription?: string,\n    ): Promise<{ r: Buffer; s: Buffer; v: Buffer }> => {\n        const ethSignature = await this.getInteraction().requestSignature(\n            signRequest,\n            requestTitle,\n            requestDescription,\n        );\n        const requestIdBuffer = ethSignature.getRequestId();\n        const signature = ethSignature.getSignature();\n        if (requestIdBuffer) {\n            const requestId = uuid.stringify(requestIdBuffer);\n            if (requestId !== _requestId) {\n                throw new Error('read signature error: mismatched requestId');\n            }\n        }\n        const r = signature.slice(0, 32);\n        const s = signature.slice(32, 64);\n        const v = signature.slice(64);\n        return {\n            r,\n            s,\n            v,\n        };\n    };\n\n    async readKeyring(): Promise<void> {\n        const { xpub, xfp, hdPath } = await this.readKeyringCryptoHDKey();\n        this.xfp = xfp;\n        this.xpub = xpub;\n        this.hdPath = hdPath;\n    }\n\n    protected checkKeyring() {\n        if (!this.xfp || !this.xpub || !this.hdPath) {\n            throw new Error('keyring not fulfilled, please call function `readKeyring` firstly');\n        }\n    }\n\n    serialize(): Promise<StoredKeyring> {\n        return Promise.resolve({\n            xfp: this.xfp,\n            xpub: this.xpub,\n            hdPath: this.hdPath,\n            accounts: this.accounts,\n            currentAccount: this.currentAccount,\n            page: this.page,\n            perPage: this.perPage,\n            paths: this.paths,\n        });\n    }\n\n    deserialize(opts?: StoredKeyring): void {\n        if (opts) {\n            this.xfp = opts.xfp;\n            this.xpub = opts.xpub;\n            this.hdPath = opts.hdPath;\n            this.accounts = opts.accounts;\n            this.currentAccount = opts.currentAccount;\n            this.page = opts.page;\n            this.perPage = opts.perPage;\n            this.paths = opts.paths;\n        }\n    }\n\n    setCurrentAccount(index: number): void {\n        this.currentAccount = index;\n    }\n\n    getCurrentAccount(): number {\n        return this.currentAccount;\n    }\n\n    getCurrentAddress(): string {\n        return this.accounts[this.currentAccount];\n    }\n\n    addAccounts(n = 1): Promise<string[]> {\n        return new Promise((resolve, reject) => {\n            try {\n                const from = this.latestAccount;\n                const to = from + n;\n                const newAccounts = [];\n\n                for (let i = from; i < to; i++) {\n                    const address = this._addressFromIndex(pathBase, i);\n                    newAccounts.push(address);\n                    this.page = 0;\n                    this.latestAccount++;\n                }\n                this.accounts = this.accounts.concat(newAccounts);\n                resolve(this.accounts);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    getFirstPage(): Promise<PagedAccount[]> {\n        this.page = 0;\n        return this.__getPage(1);\n    }\n\n    getNextPage(): Promise<PagedAccount[]> {\n        return this.__getPage(1);\n    }\n\n    getPreviousPage(): Promise<PagedAccount[]> {\n        return this.__getPage(-1);\n    }\n\n    async __getPage(increment: number): Promise<PagedAccount[]> {\n        this.page += increment;\n\n        if (this.page <= 0) {\n            this.page = 1;\n        }\n\n        if (!!!this.xfp) {\n            await this.readKeyring();\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n                const from = (this.page - 1) * this.perPage;\n                const to = from + this.perPage;\n\n                const accounts = [];\n\n                for (let i = from; i < to; i++) {\n                    const address = this._addressFromIndex(pathBase, i);\n                    accounts.push({\n                        address,\n                        balance: null,\n                        index: i,\n                    });\n                    this.paths[toChecksumAddress(address)] = i;\n                }\n                resolve(accounts);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    getAccounts() {\n        return Promise.resolve(this.accounts);\n    }\n\n    removeAccount(address: string): void {\n        if (!this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())) {\n            throw new Error(`Address ${address} not found in this keyring`);\n        }\n        this.accounts = this.accounts.filter((a) => a.toLowerCase() !== address.toLowerCase());\n    }\n\n    // tx is an instance of the ethereumjs-transaction class.\n\n    private static serializeTx(tx: Transaction): Buffer {\n        // need use EIP-155\n        // @ts-ignore\n        tx.v = new BN(tx.common.chainId());\n        // @ts-ignore\n        tx.r = new BN(0);\n        // @ts-ignore\n        tx.s = new BN(0);\n        return tx.serialize();\n    }\n\n    async signTransaction(address: string, tx: Transaction): Promise<Transaction> {\n        const hdPath = this._pathFromAddress(address);\n        const chainId = tx.common.chainId();\n        const requestId = uuid.v4();\n        const ethSignRequest = EthSignRequest.constructETHRequest(\n            BaseKeyring.serializeTx(tx),\n            DataType.transaction,\n            hdPath,\n            this.xfp,\n            requestId,\n            chainId,\n        );\n\n        const { r, s, v } = await this.requestSignature(\n            requestId,\n            ethSignRequest,\n            'Scan with your Keystone',\n            'After your Keystone has signed the transaction, click on \"Scan Keystone\" to receive the signature',\n        );\n        const txJson = tx.toJSON();\n        return Transaction.fromTxData(\n            {\n                to: txJson['to'],\n                gasLimit: txJson['gasLimit'],\n                gasPrice: txJson['gasPrice'],\n                data: txJson['data'],\n                nonce: txJson['nonce'],\n                value: txJson['value'],\n                r,\n                s,\n                v,\n            },\n            { common: tx.common },\n        );\n    }\n\n    signMessage(withAccount: string, data: string): Promise<string> {\n        return this.signPersonalMessage(withAccount, data);\n    }\n\n    async signPersonalMessage(withAccount: string, messageHex: string): Promise<string> {\n        const usignedHex = stripHexPrefix(messageHex);\n        const hdPath = this._pathFromAddress(withAccount);\n        const requestId = uuid.v4();\n        const ethSignRequest = EthSignRequest.constructETHRequest(\n            Buffer.from(usignedHex, 'hex'),\n            DataType.personalMessage,\n            hdPath,\n            this.xfp,\n            requestId,\n            undefined,\n            withAccount,\n        );\n        const { r, s, v } = await this.requestSignature(\n            requestId,\n            ethSignRequest,\n            'Scan with your Keystone',\n            'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature',\n        );\n        return '0x' + Buffer.concat([r, s, v]).toString('hex');\n    }\n\n    async signTypedData(withAccount: string, typedData: any): Promise<string> {\n        const hdPath = this._pathFromAddress(withAccount);\n        const requestId = uuid.v4();\n        const ethSignRequest = EthSignRequest.constructETHRequest(\n            Buffer.from(JSON.stringify(typedData), 'utf-8'),\n            DataType.typedData,\n            hdPath,\n            this.xfp,\n            requestId,\n            undefined,\n            withAccount,\n        );\n        const { r, s, v } = await this.requestSignature(\n            requestId,\n            ethSignRequest,\n            'Scan with your Keystone',\n            'After your Keystone has signed this data, click on \"Scan Keystone\" to receive the signature',\n        );\n        return '0x' + Buffer.concat([r, s, v]).toString('hex');\n    }\n\n    _addressFromIndex(pb: string, i: number): string {\n        this.checkKeyring();\n        if (!this.hdk) {\n            // @ts-ignore\n            this.hdk = HDKey.fromExtendedKey(this.xpub);\n        }\n        const dkey = this.hdk.derive(`${pb}/0/${i}`);\n        const address = '0x' + publicToAddress(dkey.publicKey, true).toString('hex');\n        return toChecksumAddress(address);\n    }\n\n    _pathFromAddress(address: string): string {\n        const checksummedAddress = toChecksumAddress(address);\n        let index = this.paths[checksummedAddress];\n        if (typeof index === 'undefined') {\n            for (let i = 0; i < MAX_INDEX; i++) {\n                if (checksummedAddress === this._addressFromIndex(pathBase, i)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        if (typeof index === 'undefined') {\n            throw new Error('Unknown address');\n        }\n        return `${this.hdPath}/0/${index}`;\n    }\n}\n"],"names":["keyringType","pathBase","MAX_INDEX","BaseKeyring","constructor","opts","Error","cryptoHDKey","getInteraction","readCryptoHDKey","hdPath","getOrigin","getPath","xfp","getSourceFingerprint","toString","xpub","getBip32Key","_requestId","signRequest","requestTitle","requestDescription","ethSignature","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","requestId","uuid","r","slice","s","v","page","perPage","accounts","currentAccount","paths","latestAccount","deserialize","readKeyring","readKeyringCryptoHDKey","checkKeyring","serialize","Promise","resolve","setCurrentAccount","index","getCurrentAccount","getCurrentAddress","addAccounts","n","reject","from","to","newAccounts","i","address","_addressFromIndex","push","concat","e","getFirstPage","__getPage","getNextPage","getPreviousPage","increment","balance","toChecksumAddress","getAccounts","removeAccount","map","a","toLowerCase","includes","filter","serializeTx","tx","BN","common","chainId","signTransaction","_pathFromAddress","ethSignRequest","EthSignRequest","constructETHRequest","DataType","transaction","txJson","toJSON","Transaction","fromTxData","gasLimit","gasPrice","data","nonce","value","signMessage","withAccount","signPersonalMessage","messageHex","usignedHex","stripHexPrefix","Buffer","personalMessage","undefined","signTypedData","typedData","JSON","stringify","pb","hdk","HDKey","fromExtendedKey","dkey","derive","publicToAddress","publicKey","checksummedAddress"],"mappings":"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"}