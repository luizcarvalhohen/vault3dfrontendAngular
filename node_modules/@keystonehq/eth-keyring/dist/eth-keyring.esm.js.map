{"version":3,"file":"eth-keyring.esm.js","sources":["../src/DefaultInteractionProvider.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import { EthSignRequest, CryptoHDKey, ETHSignature } from '@keystonehq/bc-ur-registry-eth';\nimport { InteractionProvider } from '@keystonehq/base-eth-keyring';\nimport sdk, { SupportedResult, ReadStatus, PlayStatus } from '@keystonehq/sdk';\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n    private static instance;\n    private keystoneSDK = undefined;\n\n    constructor() {\n        if (DefaultInteractionProvider.instance) {\n            return DefaultInteractionProvider.instance;\n        }\n        sdk.bootstrap();\n        this.keystoneSDK = sdk.getSdk();\n        DefaultInteractionProvider.instance = this;\n    }\n\n    public readCryptoHDKey = async () => {\n        const decodedResult = await this.keystoneSDK.read([SupportedResult.UR_CRYPTO_HDKEY], {\n            title: 'Sync Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n            renderInitial: {\n                walletMode: 'Web3',\n                link: 'https://keyst.one/defi',\n            },\n            URTypeErrorMessage:\n                'The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again ( Keystone firmware V1.3.0 or newer required).',\n        });\n        if (decodedResult.status === ReadStatus.success) {\n            const { result } = decodedResult;\n            const cryptoHDKey = CryptoHDKey.fromCBOR(result.cbor);\n            return cryptoHDKey;\n        } else {\n            throw new Error('Reading canceled');\n        }\n    };\n\n    public requestSignature = async (\n        ethSignRequest: EthSignRequest,\n        requestTitle?: string,\n        requestDescription?: string,\n    ) => {\n        const status = await this.keystoneSDK.play(ethSignRequest.toUR(), {\n            hasNext: true,\n            title: requestTitle,\n            description: requestDescription,\n        });\n        if (status === PlayStatus.canceled) throw new Error('#ktek_error[play-cancel]: play canceled');\n        const result = await this.keystoneSDK.read([SupportedResult.UR_ETH_SIGNATURE], {\n            title: 'Scan Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n        });\n        if (result.status === ReadStatus.canceled) {\n            throw new Error('#ktek_error[read-cancel]: read signature canceled');\n        } else {\n            return ETHSignature.fromCBOR(result.result.cbor);\n        }\n    };\n}\n","import { DefaultInteractionProvider } from './DefaultInteractionProvider';\nimport { BaseKeyring, StoredKeyring } from '@keystonehq/base-eth-keyring';\n\nexport class DefaultKeyring extends BaseKeyring {\n    static type = BaseKeyring.type;\n    static getEmptyKeyring(): DefaultKeyring {\n        return new DefaultKeyring({\n            xfp: '',\n            xpub: '',\n            hdPath: '',\n            perPage: 5,\n            page: 0,\n            accounts: [],\n            currentAccount: 0,\n            paths: {},\n        });\n    }\n\n    constructor(opts?: StoredKeyring) {\n        super(opts);\n    }\n\n    getInteraction = () => {\n        return new DefaultInteractionProvider();\n    };\n}\n"],"names":["DefaultInteractionProvider","constructor","undefined","decodedResult","keystoneSDK","read","SupportedResult","UR_CRYPTO_HDKEY","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","cryptoHDKey","CryptoHDKey","fromCBOR","cbor","Error","ethSignRequest","requestTitle","requestDescription","play","toUR","hasNext","PlayStatus","canceled","UR_ETH_SIGNATURE","ETHSignature","instance","sdk","bootstrap","getSdk","DefaultKeyring","BaseKeyring","opts","getEmptyKeyring","xfp","xpub","hdPath","perPage","page","accounts","currentAccount","paths","type"],"mappings":";;;;MAIaA;AAITC,EAAAA;AAFQ,oBAAA,GAAcC,SAAd;;AAWD,wBAAA,GAAkB;AACrB,YAAMC,aAAa,GAAG,MAAM,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,CAACC,eAAe,CAACC,eAAjB,CAAtB,EAAyD;AACjFC,QAAAA,KAAK,EAAE,eAD0E;AAEjFC,QAAAA,WAAW,EAAE,oDAFoE;AAGjFC,QAAAA,aAAa,EAAE;AACXC,UAAAA,UAAU,EAAE,MADD;AAEXC,UAAAA,IAAI,EAAE;AAFK,SAHkE;AAOjFC,QAAAA,kBAAkB,EACd;AAR6E,OAAzD,CAA5B;;AAUA,UAAIV,aAAa,CAACW,MAAd,KAAyBC,UAAU,CAACC,OAAxC,EAAiD;AAC7C,cAAM;AAAEC,UAAAA;AAAF,YAAad,aAAnB;AACA,cAAMe,WAAW,GAAGC,WAAW,CAACC,QAAZ,CAAqBH,MAAM,CAACI,IAA5B,CAApB;AACA,eAAOH,WAAP;AACH,OAJD,MAIO;AACH,cAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACH;AACJ,KAlBM;;AAoBA,yBAAA,GAAmB,OACtBC,cADsB,EAEtBC,YAFsB,EAGtBC,kBAHsB;AAKtB,YAAMX,MAAM,GAAG,MAAM,KAAKV,WAAL,CAAiBsB,IAAjB,CAAsBH,cAAc,CAACI,IAAf,EAAtB,EAA6C;AAC9DC,QAAAA,OAAO,EAAE,IADqD;AAE9DpB,QAAAA,KAAK,EAAEgB,YAFuD;AAG9Df,QAAAA,WAAW,EAAEgB;AAHiD,OAA7C,CAArB;AAKA,UAAIX,MAAM,KAAKe,UAAU,CAACC,QAA1B,EAAoC,MAAM,IAAIR,KAAJ,CAAU,yCAAV,CAAN;AACpC,YAAML,MAAM,GAAG,MAAM,KAAKb,WAAL,CAAiBC,IAAjB,CAAsB,CAACC,eAAe,CAACyB,gBAAjB,CAAtB,EAA0D;AAC3EvB,QAAAA,KAAK,EAAE,eADoE;AAE3EC,QAAAA,WAAW,EAAE;AAF8D,OAA1D,CAArB;;AAIA,UAAIQ,MAAM,CAACH,MAAP,KAAkBC,UAAU,CAACe,QAAjC,EAA2C;AACvC,cAAM,IAAIR,KAAJ,CAAU,mDAAV,CAAN;AACH,OAFD,MAEO;AACH,eAAOU,YAAY,CAACZ,QAAb,CAAsBH,MAAM,CAACA,MAAP,CAAcI,IAApC,CAAP;AACH;AACJ,KApBM;;AA5BH,QAAIrB,0BAA0B,CAACiC,QAA/B,EAAyC;AACrC,aAAOjC,0BAA0B,CAACiC,QAAlC;AACH;;AACDC,IAAAA,GAAG,CAACC,SAAJ;AACA,SAAK/B,WAAL,GAAmB8B,GAAG,CAACE,MAAJ,EAAnB;AACApC,IAAAA,0BAA0B,CAACiC,QAA3B,GAAsC,IAAtC;AACH;;;;MCZQI,uBAAuBC;AAehCrC,EAAAA,YAAYsC;AACR,UAAMA,IAAN;;AAGJ,uBAAA,GAAiB;AACb,aAAO,IAAIvC,0BAAJ,EAAP;AACH,KAFD;AAFC;;AAfqB,SAAfwC,eAAe;AAClB,WAAO,IAAIH,cAAJ,CAAmB;AACtBI,MAAAA,GAAG,EAAE,EADiB;AAEtBC,MAAAA,IAAI,EAAE,EAFgB;AAGtBC,MAAAA,MAAM,EAAE,EAHc;AAItBC,MAAAA,OAAO,EAAE,CAJa;AAKtBC,MAAAA,IAAI,EAAE,CALgB;AAMtBC,MAAAA,QAAQ,EAAE,EANY;AAOtBC,MAAAA,cAAc,EAAE,CAPM;AAQtBC,MAAAA,KAAK,EAAE;AARe,KAAnB,CAAP;AAUH;;;AAZMX,mBAAA,GAAOC,WAAW,CAACW,IAAnB;;;;"}