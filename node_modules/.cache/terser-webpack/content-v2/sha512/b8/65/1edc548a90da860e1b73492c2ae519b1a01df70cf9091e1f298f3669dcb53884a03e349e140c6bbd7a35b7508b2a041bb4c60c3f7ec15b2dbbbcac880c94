{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{\"50du\":function(t,e,n){const s=n(\"WDYn\");class i extends s{constructor(t){super(),setTimeout(()=>this.emit(\"error\",new Error(t)),0)}}t.exports=t=>()=>new i(t)},JfcN:function(t,e){t.exports=(t={})=>({injected:[\"injected\"],frame:[\"ws://127.0.0.1:1248\",\"http://127.0.0.1:1248\"],direct:[\"ws://127.0.0.1:8546\",\"http://127.0.0.1:8545\"],infura:[\"wss://mainnet.infura.io/ws/v3/\"+t.infuraId,\"https://mainnet.infura.io/v3/\"+t.infuraId],alchemy:[\"wss://eth-mainnet.ws.alchemyapi.io/v2/\"+t.alchemyId,\"https://eth-mainnet.alchemyapi.io/v2/\"+t.alchemyId],infuraRopsten:[\"wss://ropsten.infura.io/ws/v3/\"+t.infuraId,\"https://ropsten.infura.io/v3/\"+t.infuraId],alchemyRopsten:[\"wss://eth-ropsten.ws.alchemyapi.io/v2/\"+t.alchemyId,\"https://eth-ropsten.alchemyapi.io/v2/\"+t.alchemyId],infuraRinkeby:[\"wss://rinkeby.infura.io/ws/v3/\"+t.infuraId,\"https://rinkeby.infura.io/v3/\"+t.infuraId],alchemyRinkeby:[\"wss://eth-rinkeby.ws.alchemyapi.io/v2/\"+t.alchemyId,\"https://eth-rinkeby.alchemyapi.io/v2/\"+t.alchemyId],infuraKovan:[\"wss://kovan.infura.io/ws/v3/\"+t.infuraId,\"https://kovan.infura.io/v3/\"+t.infuraId],alchemyKovan:[\"wss://eth-kovan.ws.alchemyapi.io/v2/\"+t.alchemyId,\"https://eth-kovan.alchemyapi.io/v2/\"+t.alchemyId],infuraGoerli:[\"wss://goerli.infura.io/ws/v3/\"+t.infuraId,\"https://goerli.infura.io/ws/v3/\"+t.infuraId],alchemyGoerli:[\"wss://eth-goerli.ws.alchemyapi.io/v2/\"+t.alchemyId,\"https://eth-goerli.alchemyapi.io/v2/\"+t.alchemyId],idChain:[\"wss://idchain.one/ws/\"],xDai:[\"https://rpc.xdaichain.com\",\"https://dai.poa.network\"],matic:[\"https://rpc-mainnet.maticvigil.com\"]})},WDYn:function(t,e,n){\"use strict\";var s,i=\"object\"==typeof Reflect?Reflect:null,r=i&&\"function\"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};s=i&&\"function\"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var o=Number.isNaN||function(t){return t!=t};function c(){c.init.call(this)}t.exports=c,t.exports.once=function(t,e){return new Promise(function(n,s){function i(){void 0!==r&&t.removeListener(\"error\",r),n([].slice.call(arguments))}var r;\"error\"!==e&&(r=function(n){t.removeListener(e,i),s(n)},t.once(\"error\",r)),t.once(e,i)})},c.EventEmitter=c,c.prototype._events=void 0,c.prototype._eventsCount=0,c.prototype._maxListeners=void 0;var h=10;function a(t){if(\"function\"!=typeof t)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?c.defaultMaxListeners:t._maxListeners}function d(t,e,n,s){var i,r,o;if(a(n),void 0===(r=t._events)?(r=t._events=Object.create(null),t._eventsCount=0):(void 0!==r.newListener&&(t.emit(\"newListener\",e,n.listener?n.listener:n),r=t._events),o=r[e]),void 0===o)o=r[e]=n,++t._eventsCount;else if(\"function\"==typeof o?o=r[e]=s?[n,o]:[o,n]:s?o.unshift(n):o.push(n),(i=u(t))>0&&o.length>i&&!o.warned){o.warned=!0;var c=new Error(\"Possible EventEmitter memory leak detected. \"+o.length+\" \"+String(e)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");c.name=\"MaxListenersExceededWarning\",c.emitter=t,c.type=e,c.count=o.length,console&&console.warn&&console.warn(c)}return t}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(t,e,n){var s={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=p.bind(s);return i.listener=n,s.wrapFn=i,i}function m(t,e,n){var s=t._events;if(void 0===s)return[];var i=s[e];return void 0===i?[]:\"function\"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):v(i,i.length)}function f(t){var e=this._events;if(void 0!==e){var n=e[t];if(\"function\"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(t,e){for(var n=new Array(e),s=0;s<e;++s)n[s]=t[s];return n}Object.defineProperty(c,\"defaultMaxListeners\",{enumerable:!0,get:function(){return h},set:function(t){if(\"number\"!=typeof t||t<0||o(t))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+t+\".\");h=t}}),c.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},c.prototype.setMaxListeners=function(t){if(\"number\"!=typeof t||t<0||o(t))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+t+\".\");return this._maxListeners=t,this},c.prototype.getMaxListeners=function(){return u(this)},c.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var s=\"error\"===t,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var c=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));throw c.context=o,c}var h=i[t];if(void 0===h)return!1;if(\"function\"==typeof h)r(h,this,e);else{var a=h.length,u=v(h,a);for(n=0;n<a;++n)r(u[n],this,e)}return!0},c.prototype.on=c.prototype.addListener=function(t,e){return d(this,t,e,!1)},c.prototype.prependListener=function(t,e){return d(this,t,e,!0)},c.prototype.once=function(t,e){return a(e),this.on(t,l(this,t,e)),this},c.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,l(this,t,e)),this},c.prototype.off=c.prototype.removeListener=function(t,e){var n,s,i,r,o;if(a(e),void 0===(s=this._events))return this;if(void 0===(n=s[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete s[t],s.removeListener&&this.emit(\"removeListener\",t,n.listener||e));else if(\"function\"!=typeof n){for(i=-1,r=n.length-1;r>=0;r--)if(n[r]===e||n[r].listener===e){o=n[r].listener,i=r;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(s[t]=n[0]),void 0!==s.removeListener&&this.emit(\"removeListener\",t,o||e)}return this},c.prototype.removeAllListeners=function(t){var e,n,s;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,r=Object.keys(n);for(s=0;s<r.length;++s)\"removeListener\"!==(i=r[s])&&this.removeAllListeners(i);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(s=e.length-1;s>=0;s--)this.removeListener(t,e[s]);return this},c.prototype.listeners=function(t){return m(this,t,!0)},c.prototype.rawListeners=function(t){return m(this,t,!1)},c.listenerCount=function(t,e){return\"function\"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},c.prototype.listenerCount=f,c.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},Zg07:function(t,e){const n=t=>\"injected\"===t?\"injected\":t.endsWith(\".ipc\")?\"ipc\":t.startsWith(\"wss://\")||t.startsWith(\"ws://\")?\"ws\":t.startsWith(\"https://\")||t.startsWith(\"http://\")?\"http\":\"\";t.exports=(t,e)=>[].concat(...[].concat(t).map(t=>e[t]?e[t].map(e=>({type:t,location:e,protocol:n(e)})):{type:\"custom\",location:t,protocol:n(t)})).filter(t=>!(!t.protocol&&\"injected\"!==t.type&&(console.log('eth-provider | Invalid provider preset/location: \"'+t.location+'\"'),1)))},dbjG:function(t,e,n){const s=n(\"WDYn\"),i=n(\"soB0\"),r=n(\"x4lP\"),o=t=>{function e(e){t.status=e,t instanceof s&&t.emit(\"status\",e)}async function n(){if(t.inSetup)return setTimeout(n,1e3);try{await t.send(\"eth_syncing\")?(e(\"syncing\"),setTimeout(()=>n(),5e3)):e(\"connected\")}catch(s){e(\"disconnected\")}}return e(\"loading\"),n(),t.on(\"connect\",()=>n()),t.on(\"close\",()=>e(\"disconnected\")),t};t.exports=(t,e,n)=>{if(t.injected.__isProvider&&e.map(t=>t.type).indexOf(\"injected\")>-1)return delete t.injected.__isProvider,o(t.injected);const s=new i(new r(t,e,n));return s.setMaxListeners(128),o(s)}},fcLq:function(t,e,n){const s=n(\"WDYn\"),{v4:i}=n(\"PTSb\");let r;class o extends s{constructor(t,e,n){super(),r=t,this.options=n,this.connected=!1,this.subscriptions=!1,this.status=\"loading\",this.url=e,this.pollId=i(),setTimeout(()=>this.create(),0),this._emit=(...t)=>this.closed?null:this.emit(...t)}create(){if(!r)return this._emit(\"error\",new Error(\"No HTTP transport available\"));this.on(\"error\",()=>{this.connected&&this.close()}),this.init()}init(){this.send({jsonrpc:\"2.0\",method:\"net_version\",params:[],id:1},(t,e)=>{if(t)return this._emit(\"error\",t);this.connected=!0,this._emit(\"connect\"),this.send({jsonrpc:\"2.0\",id:1,method:\"eth_pollSubscriptions\",params:[this.pollId,\"immediate\"]},(t,e)=>{t||(this.subscriptions=!0,this.pollSubscriptions())})})}pollSubscriptions(){this.send({jsonrpc:\"2.0\",id:1,method:\"eth_pollSubscriptions\",params:[this.pollId]},(t,e)=>{if(t)return this.subscriptionTimeout=setTimeout(()=>this.pollSubscriptions(),1e4),this._emit(\"error\",t);this.closed||(this.subscriptionTimeout=this.pollSubscriptions()),e&&e.map(t=>{let e;try{e=JSON.parse(t)}catch(n){e=!1}return e}).filter(t=>t).forEach(t=>this._emit(\"payload\",t))})}close(){this.closed=!0,this._emit(\"close\"),clearTimeout(this.subscriptionTimeout),this.removeAllListeners()}filterStatus(t){if(t.status>=200&&t.status<300)return t;const e=new Error(t.statusText);throw e.res=t,e.message}error(t,e,n=-1){this._emit(\"payload\",{id:t.id,jsonrpc:t.jsonrpc,error:{message:e,code:n}})}send(t,e){if(this.closed)return this.error(t,\"Not connected\");if(\"eth_subscribe\"===t.method){if(!this.subscriptions)return this.error(t,\"Subscriptions are not supported by this HTTP endpoint\");t.pollId=this.pollId}const n=new r;let s=!1;const i=(i,r)=>{if(!s)if(n.abort(),s=!0,e)e(i,r);else{const{id:e,jsonrpc:n}=t;this._emit(\"payload\",i?{id:e,jsonrpc:n,error:{message:i.message,code:i.code}}:{id:e,jsonrpc:n,result:r})}};n.open(\"POST\",this.url,!0),n.setRequestHeader(\"Content-Type\",\"application/json\"),n.timeout=6e4,n.onerror=i,n.ontimeout=i,n.onreadystatechange=()=>{if(4===n.readyState)try{const t=JSON.parse(n.responseText);i(t.error,t.result)}catch(t){i(t)}},n.send(JSON.stringify(t))}}t.exports=t=>(e,n)=>new o(t,e,n)},gU0w:function(t,e,n){const s=n(\"WDYn\"),i=n(\"y20P\");let r;class o extends s{constructor(t,e,n){super(),r=t,setTimeout(()=>this.create(e,n),0)}create(t,e){r||this.emit(\"error\",new Error(\"No WebSocket transport available\"));try{this.socket=new r(t,[],{origin:e.origin})}catch(n){return this.emit(\"error\",n)}this.socket.addEventListener(\"error\",t=>this.emit(\"error\",t)),this.socket.addEventListener(\"open\",()=>{this.emit(\"connect\"),this.socket.addEventListener(\"message\",t=>{i(\"string\"==typeof t.data?t.data:\"\",(t,e)=>{t||e.forEach(t=>{Array.isArray(t)?t.forEach(t=>this.emit(\"payload\",t)):this.emit(\"payload\",t)})})}),this.socket.addEventListener(\"close\",()=>this.onClose())})}onClose(){this.socket=null,this.closed=!0,this.emit(\"close\"),this.removeAllListeners()}close(){this.socket?this.socket.close():this.onClose()}error(t,e,n=-1){this.emit(\"payload\",{id:t.id,jsonrpc:t.jsonrpc,error:{message:e,code:n}})}send(t){this.socket&&this.socket.readyState===this.socket.CONNECTING?setTimeout(e=>this.send(t),10):!this.socket||this.socket.readyState>1?(this.connected=!1,this.error(t,\"Not connected\")):this.socket.send(JSON.stringify(t))}}t.exports=t=>(e,n)=>new o(t,e,n)},gfgD:function(t,e,n){const s=n(\"Zg07\"),i=n(\"dbjG\"),r=n(\"JfcN\"),o={ethereum:\"undefined\"!=typeof window&&void 0!==window.ethereum?window.ethereum:null,web3:\"undefined\"!=typeof window&&void 0!==window.web3?window.web3.currentProvider:null},c=\"undefined\"!=typeof window&&void 0!==window.WebSocket?window.WebSocket:null,h=\"undefined\"!=typeof window&&void 0!==window.XMLHttpRequest?window.XMLHttpRequest:null;o.ethereum&&(o.ethereum.__isProvider=!0);const a={injected:o.ethereum||n(\"hiKS\")(o.web3),ipc:n(\"50du\")(\"IPC connections are unavliable in the browser\"),ws:n(\"gU0w\")(c),http:n(\"fcLq\")(h)};t.exports=(t,e)=>{!t||Array.isArray(t)||\"object\"!=typeof t||e||(e=t,t=void 0),t||(t=[\"injected\",\"frame\"]),e||(e={}),(t=[].concat(t)).forEach(t=>{if(t.startsWith(\"alchemy\")&&!e.alchemyId)throw new Error(\"Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: '123abc' }\");if(t.startsWith(\"infura\")&&!e.infuraId)throw new Error(\"Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: '123abc' }\")});const n=r(e);return i(a,s(t,n),e)}},hiKS:function(t,e,n){const s=n(\"WDYn\");class i extends s{constructor(t,e){super(),t?setTimeout(()=>this.emit(\"error\",new Error(\"Injected web3 provider is not currently supported\")),0):setTimeout(()=>this.emit(\"error\",new Error(\"No injected provider found\")),0)}}t.exports=t=>e=>new i(t,e)},soB0:function(t,e,n){const s=n(\"WDYn\");t.exports=class extends s{constructor(t){super(),this.enable=this.enable.bind(this),this._send=this._send.bind(this),this.send=this.send.bind(this),this._sendBatch=this._sendBatch.bind(this),this.subscribe=this.subscribe.bind(this),this.unsubscribe=this.unsubscribe.bind(this),this.sendAsync=this.sendAsync.bind(this),this.sendAsyncBatch=this.sendAsyncBatch.bind(this),this.isConnected=this.isConnected.bind(this),this.close=this.close.bind(this),this.request=this.request.bind(this),this.connected=!1,this.nextId=0,this.promises={},this.subscriptions=[],this.connection=t,this.connection.on(\"connect\",()=>this.checkConnection()),this.connection.on(\"close\",()=>{this.connected=!1,this.emit(\"close\"),this.emit(\"disconnect\")}),this.connection.on(\"payload\",t=>{const{id:e,method:n,error:s,result:i}=t;void 0!==e?this.promises[e]&&(t.error?this.promises[e].reject(s):this.promises[e].resolve(i),delete this.promises[e]):n&&n.indexOf(\"_subscription\")>-1&&(this.emit(t.params.subscription,t.params.result),this.emit(n,t.params),this.emit(\"message\",{type:t.method,data:{subscription:t.params.subscription,result:t.params.result}}),this.emit(\"data\",t))}),this.on(\"newListener\",(t,e)=>{\"chainChanged\"===t&&!this.attemptedChainSubscription&&this.connected?this.startChainSubscription():\"accountsChanged\"===t&&!this.attemptedAccountsSubscription&&this.connected?this.startAccountsSubscription():\"networkChanged\"===t&&!this.attemptedNetworkSubscription&&this.connected&&(this.startNetworkSubscription(),console.warn(\"The networkChanged event is being deprecated, use chainChainged instead\"))})}async checkConnection(){try{this.emit(\"connect\",await this._send(\"net_version\")),this.connected=!0,this.listenerCount(\"networkChanged\")&&!this.attemptedNetworkSubscription&&this.startNetworkSubscription(),this.listenerCount(\"chainChanged\")&&!this.attemptedChainSubscription&&this.startNetworkSubscription(),this.listenerCount(\"accountsChanged\")&&!this.attemptedAccountsSubscription&&this.startAccountsSubscription()}catch(t){this.connected=!1}}async startNetworkSubscription(){this.attemptedNetworkSubscription=!0;try{const t=await this.subscribe(\"eth_subscribe\",\"networkChanged\");this.on(t,t=>this.emit(\"networkChanged\",t))}catch(t){console.warn(\"Unable to subscribe to networkChanged\",t)}}async startChainSubscription(){this.attemptedChainSubscription=!0;try{const t=await this.subscribe(\"eth_subscribe\",\"chainChanged\");this.on(t,t=>this.emit(\"chainChanged\",t))}catch(t){console.warn(\"Unable to subscribe to chainChanged\",t)}}async startAccountsSubscription(){this.attemptedAccountsSubscription=!0;try{const t=await this.subscribe(\"eth_subscribe\",\"accountsChanged\");this.on(t,t=>this.emit(\"accountsChanged\",t))}catch(t){console.warn(\"Unable to subscribe to accountsChanged\",t)}}enable(){return new Promise((t,e)=>{this._send(\"eth_accounts\").then(n=>{if(n.length>0)this.accounts=n,this.coinbase=n[0],this.emit(\"enable\"),t(n);else{const t=new Error(\"User Denied Full Provider\");t.code=4001,e(t)}}).catch(e)})}_send(t,e=[]){return new Promise((n,s)=>{let i;\"object\"==typeof t&&null!==t?(i=t,i.params=i.params||[],i.jsonrpc=\"2.0\",i.id=this.nextId++):i={jsonrpc:\"2.0\",id:this.nextId++,method:t,params:e},this.promises[i.id]={resolve:n,reject:s},i.method&&\"string\"==typeof i.method?i.params instanceof Array?this.connection.send(i):(this.promises[i.id].reject(new Error(\"Params is not a valid array.\")),delete this.promises[i.id]):(this.promises[i.id].reject(new Error(\"Method is not a valid string.\")),delete this.promises[i.id])})}send(...t){return this._send(...t)}_sendBatch(t){return Promise.all(t.map(t=>this._send(t.method,t.params)))}subscribe(t,e,n=[]){return this._send(t,[e,...n]).then(t=>(this.subscriptions.push(t),t))}unsubscribe(t,e){return this._send(t,[e]).then(t=>{if(t)return this.subscriptions=this.subscriptions.filter(t=>t!==e),this.removeAllListeners(e),t})}sendAsync(t,e){return e&&\"function\"==typeof e?t?(t.jsonrpc=\"2.0\",t.id=t.id||this.nextId++,t instanceof Array?this.sendAsyncBatch(t,e):this._send(t.method,t.params).then(n=>{e(null,{id:t.id,jsonrpc:t.jsonrpc,result:n})}).catch(t=>{e(t)})):e(new Error(\"Invalid Payload\")):e(new Error(\"Invalid or undefined callback provided to sendAsync\"))}sendAsyncBatch(t,e){return this._sendBatch(t).then(n=>{const s=n.map((e,n)=>({id:t[n].id,jsonrpc:t[n].jsonrpc,result:e}));e(null,s)}).catch(t=>{e(t)})}isConnected(){return this.connected}close(){this.connection&&this.connection.close&&this.connection.close(),this.connected=!1;const t=new Error(\"Provider closed, subscription lost, please subscribe again.\");this.subscriptions.forEach(e=>this.emit(e,t)),this.subscriptions=[]}request(t){return this._send(t.method,t.params)}}},x4lP:function(t,e,n){const s=n(\"WDYn\");t.exports=class extends s{constructor(t,e,n){super(),this.targets=e,this.options=n,this.connections=t,this.connected=!1,this.status=\"loading\",this.interval=n.interval||5e3,this.name=n.name||\"default\",this.inSetup=!0,this.connect()}connect(t=0){if(this.connection&&\"connected\"===this.connection.status&&t>=this.connection.index);else if(0===this.targets.length);else{const{protocol:e,location:n}=this.targets[t];this.connection=this.connections[e](n,this.options),this.connection.on(\"error\",e=>this.connected?this.listenerCount(\"error\")?this.emit(\"error\",e):void console.warn(\"eth-provider - Uncaught connection error: \"+e.message):this.connectionError(t,e)),this.connection.on(\"close\",()=>{this.connected=!1,this.emitClose(),this.closing||this.refresh()}),this.connection.on(\"connect\",()=>{this.connection.target=this.targets[t],this.connection.index=t,this.targets[t].status=this.connection.status,this.connected=!0,this.inSetup=!1,this.emit(\"connect\")}),this.connection.on(\"data\",t=>this.emit(\"data\",t)),this.connection.on(\"payload\",t=>this.emit(\"payload\",t))}}refresh(t=this.interval){clearTimeout(this.connectTimer),this.connectTimer=setTimeout(()=>this.connect(),t)}connectionError(t,e){this.targets[t].status=e,this.targets.length-1===t?(this.inSetup=!1,this.refresh()):this.connect(++t)}emitClose(){this.emit(\"close\")}close(){this.closing=!0,this.connection&&this.connection.close&&!this.connection.closed?this.connection.close():this.emit(\"close\"),clearTimeout(this.connectTimer),clearTimeout(this.setupTimer)}error(t,e,n=-1){this.emit(\"payload\",{id:t.id,jsonrpc:t.jsonrpc,error:{message:e,code:n}})}send(t){this.inSetup?this.setupTimer=setTimeout(()=>this.send(t),100):this.connection.closed?this.error(t,\"Not connected\",4900):this.connection.send(t)}}},y20P:function(t,e){let n,s;t.exports=(t,e)=>{const i=[];t.replace(/\\}[\\n\\r]?\\{/g,\"}|--|{\").replace(/\\}\\][\\n\\r]?\\[\\{/g,\"}]|--|[{\").replace(/\\}[\\n\\r]?\\[\\{/g,\"}|--|[{\").replace(/\\}\\][\\n\\r]?\\{/g,\"}]|--|{\").split(\"|--|\").forEach(t=>{let r;n&&(t=n+t);try{r=JSON.parse(t)}catch(o){return n=t,clearTimeout(s),void(s=setTimeout(()=>e(new Error(\"Parse response timeout\")),15e3))}clearTimeout(s),n=null,r&&i.push(r)}),e(null,i)}}}]);","name":"42.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[42],{\n\n/***/ \"50du\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\n\nclass UnavailableConnection extends EventEmitter {\n  constructor (message) {\n    super()\n    setTimeout(() => this.emit('error', new Error(message)), 0)\n  }\n}\n\nmodule.exports = message => () => new UnavailableConnection(message)\n\n\n/***/ }),\n\n/***/ \"JfcN\":\n/***/ (function(module, exports) {\n\nmodule.exports = (options = {}) => {\n  return {\n    injected: ['injected'],\n    frame: ['ws://127.0.0.1:1248', 'http://127.0.0.1:1248'],\n    direct: ['ws://127.0.0.1:8546', 'http://127.0.0.1:8545'], // IPC paths will be prepended in Node/Electron\n    infura: [`wss://mainnet.infura.io/ws/v3/${options.infuraId}`, `https://mainnet.infura.io/v3/${options.infuraId}`],\n    alchemy: [`wss://eth-mainnet.ws.alchemyapi.io/v2/${options.alchemyId}`, `https://eth-mainnet.alchemyapi.io/v2/${options.alchemyId}`],\n    infuraRopsten: [`wss://ropsten.infura.io/ws/v3/${options.infuraId}`, `https://ropsten.infura.io/v3/${options.infuraId}`],\n    alchemyRopsten: [`wss://eth-ropsten.ws.alchemyapi.io/v2/${options.alchemyId}`, `https://eth-ropsten.alchemyapi.io/v2/${options.alchemyId}`],\n    infuraRinkeby: [`wss://rinkeby.infura.io/ws/v3/${options.infuraId}`, `https://rinkeby.infura.io/v3/${options.infuraId}`],\n    alchemyRinkeby: [`wss://eth-rinkeby.ws.alchemyapi.io/v2/${options.alchemyId}`, `https://eth-rinkeby.alchemyapi.io/v2/${options.alchemyId}`],\n    infuraKovan: [`wss://kovan.infura.io/ws/v3/${options.infuraId}`, `https://kovan.infura.io/v3/${options.infuraId}`],\n    alchemyKovan: [`wss://eth-kovan.ws.alchemyapi.io/v2/${options.alchemyId}`, `https://eth-kovan.alchemyapi.io/v2/${options.alchemyId}`],\n    infuraGoerli: [`wss://goerli.infura.io/ws/v3/${options.infuraId}`, `https://goerli.infura.io/ws/v3/${options.infuraId}`],\n    alchemyGoerli: [`wss://eth-goerli.ws.alchemyapi.io/v2/${options.alchemyId}`, `https://eth-goerli.alchemyapi.io/v2/${options.alchemyId}`],\n    idChain: ['wss://idchain.one/ws/'],\n    xDai: ['https://rpc.xdaichain.com', 'https://dai.poa.network'],\n    matic: ['https://rpc-mainnet.maticvigil.com']\n  }\n}\n\n\n/***/ }),\n\n/***/ \"WDYn\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n\n\n/***/ }),\n\n/***/ \"Zg07\":\n/***/ (function(module, exports) {\n\nconst getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n\n\n/***/ }),\n\n/***/ \"dbjG\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\nconst EthereumProvider = __webpack_require__(\"soB0\")\nconst ConnectionManager = __webpack_require__(\"x4lP\")\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n\n\n/***/ }),\n\n/***/ \"fcLq\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\nconst { v4: uuid } = __webpack_require__(\"PTSb\")\n\nconst dev = \"production\" === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.options = options\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n    this._emit = (...args) => !this.closed ? this.emit(...args) : null\n  }\n\n  create () {\n    if (!XHR) return this._emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'net_version', params: [], id: 1 }, (err, response) => {\n      if (err) return this._emit('error', err)\n      this.connected = true\n      this._emit('connect')\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this._emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this._emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this._emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this._emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this._emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    // Below not working becasue XHR lib blocks it claiming \"restricted header\"\n    // if (this.options.origin) xhr.setRequestHeader('Origin', this.options.origin)\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n\n\n/***/ }),\n\n/***/ \"gU0w\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\nconst parse = __webpack_require__(\"y20P\")\nconst dev = \"production\" === 'development'\n\nlet WebSocket\n\nclass WebSocketConnection extends EventEmitter {\n  constructor (_WebSocket, url, options) {\n    super()\n    WebSocket = _WebSocket\n    setTimeout(() => this.create(url, options), 0)\n  }\n\n  create (url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'))\n    try { this.socket = new WebSocket(url, [], { origin: options.origin }) } catch (e) { return this.emit('error', e) }\n    this.socket.addEventListener('error', err => this.emit('error', err))\n    this.socket.addEventListener('open', () => {\n      this.emit('connect')\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : ''\n        parse(data, (err, payloads) => {\n          if (err) return //\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload))\n            } else {\n              this.emit('payload', load)\n            }\n          })\n        })\n      })\n      this.socket.addEventListener('close', () => this.onClose())\n    })\n  }\n\n  onClose () {\n    this.socket = null\n    this.closed = true\n    if (dev) console.log('Closing WebSocket connection')\n    this.emit('close')\n    this.removeAllListeners()\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    } else {\n      this.onClose()\n    }\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10)\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false\n      this.error(payload, 'Not connected')\n    } else {\n      this.socket.send(JSON.stringify(payload))\n    }\n  }\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb)\n\n\n/***/ }),\n\n/***/ \"gfgD\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst resolve = __webpack_require__(\"Zg07\")\nconst provider = __webpack_require__(\"dbjG\")\nconst presets = __webpack_require__(\"JfcN\")\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || __webpack_require__(\"hiKS\")(injected.web3),\n  ipc: __webpack_require__(\"50du\")('IPC connections are unavliable in the browser'),\n  ws: __webpack_require__(\"gU0w\")(ws),\n  http: __webpack_require__(\"fcLq\")(XHR)\n}\n\nmodule.exports = (targets, options) => {\n  if (targets && !Array.isArray(targets) && typeof targets === 'object' && !options) {\n    options = targets\n    targets = undefined\n  }\n  if (!targets) targets = ['injected', 'frame']\n  if (!options) options = {}\n\n  targets = [].concat(targets)\n\n  targets.forEach(t => {\n    if (t.startsWith('alchemy') && !options.alchemyId) throw new Error('Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: \\'123abc\\' }')\n    if (t.startsWith('infura') && !options.infuraId) throw new Error('Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: \\'123abc\\' }')\n  })\n\n  const sets = presets(options)\n\n  return provider(connections, resolve(targets, sets), options)\n}\n\n\n/***/ }),\n\n/***/ \"hiKS\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\n\nclass InjectedConnection extends EventEmitter {\n  constructor (_injected, options) {\n    super()\n    if (_injected) {\n      setTimeout(() => this.emit('error', new Error('Injected web3 provider is not currently supported')), 0)\n    } else {\n      setTimeout(() => this.emit('error', new Error('No injected provider found')), 0)\n    }\n  }\n}\n\nmodule.exports = injected => options => new InjectedConnection(injected, options)\n\n\n/***/ }),\n\n/***/ \"soB0\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.enable = this.enable.bind(this)\n    this._send = this._send.bind(this)\n    this.send = this.send.bind(this)\n    this._sendBatch = this._sendBatch.bind(this)\n    this.subscribe = this.subscribe.bind(this)\n    this.unsubscribe = this.unsubscribe.bind(this)\n    this.sendAsync = this.sendAsync.bind(this)\n    this.sendAsyncBatch = this.sendAsyncBatch.bind(this)\n    this.isConnected = this.isConnected.bind(this)\n    this.close = this.close.bind(this)\n    this.request = this.request.bind(this)\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => {\n      this.connected = false\n      this.emit('close')\n      this.emit('disconnect')\n    })\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        // Events: connect, disconnect, chainChanged, accountsChanged, message\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Older EIP-1193\n        this.emit('message', { // Latest EIP-1193\n          type: payload.method,\n          data: {\n            subscription: payload.params.subscription,\n            result: payload.params.result\n          }\n        })\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'chainChanged' && !this.attemptedChainSubscription && this.connected) {\n        this.startChainSubscription()\n      } else if (event === 'accountsChanged' && !this.attemptedAccountsSubscription && this.connected) {\n        this.startAccountsSubscription()\n      } else if (event === 'networkChanged' && !this.attemptedNetworkSubscription && this.connected) {\n        this.startNetworkSubscription()\n        console.warn('The networkChanged event is being deprecated, use chainChainged instead')\n      }\n    })\n  }\n\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('chainChanged') && !this.attemptedChainSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      const networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n\n  async startChainSubscription () {\n    this.attemptedChainSubscription = true\n    try {\n      const chainChanged = await this.subscribe('eth_subscribe', 'chainChanged')\n      this.on(chainChanged, netId => this.emit('chainChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to chainChanged', e)\n    }\n  }\n\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      const accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n\n  _send (method, params = []) {\n    return new Promise((resolve, reject) => {\n      let payload\n      if (typeof method === 'object' && method !== null) {\n        payload = method\n        payload.params = payload.params || []\n        payload.jsonrpc = '2.0'\n        payload.id = this.nextId++\n      } else {\n        payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n      }\n      this.promises[payload.id] = { resolve, reject }\n      if (!payload.method || typeof payload.method !== 'string') {\n        this.promises[payload.id].reject(new Error('Method is not a valid string.'))\n        delete this.promises[payload.id]\n      } else if (!(payload.params instanceof Array)) {\n        this.promises[payload.id].reject(new Error('Params is not a valid array.'))\n        delete this.promises[payload.id]\n      } else {\n        this.connection.send(payload)\n      }\n    })\n  }\n\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    payload.jsonrpc = '2.0'\n    payload.id = payload.id || this.nextId++\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      const result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n\n  close () {\n    if (this.connection && this.connection.close) this.connection.close()\n    this.connected = false\n    const error = new Error('Provider closed, subscription lost, please subscribe again.')\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n\n  request (payload) {\n    return this._send(payload.method, payload.params)\n  }\n}\n\nmodule.exports = EthereumProvider\n\n\n/***/ }),\n\n/***/ \"x4lP\":\n/***/ (function(module, exports, __webpack_require__) {\n\nconst EventEmitter = __webpack_require__(\"WDYn\")\n\nconst dev = \"production\" === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.options = options\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location, this.options)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', () => {\n        this.connected = false\n        this.emitClose()\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  emitClose () {\n    this.emit('close')\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection && this.connection.close && !this.connection.closed) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n    clearTimeout(this.setupTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      this.setupTimer = setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected', 4900)\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n\n\n/***/ }),\n\n/***/ \"y20P\":\n/***/ (function(module, exports) {\n\nlet last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n\n\n/***/ })\n\n}]);","inputSourceMap":null}