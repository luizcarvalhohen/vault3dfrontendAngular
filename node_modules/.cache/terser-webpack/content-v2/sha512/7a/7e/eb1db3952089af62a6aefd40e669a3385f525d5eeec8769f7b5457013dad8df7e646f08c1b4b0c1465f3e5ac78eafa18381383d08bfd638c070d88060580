{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22,44],{8:function(e,t){},B3Rj:function(e,t,r){var i=r(\"QqcV\");e.exports=i(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")},BumV:function(e,t,r){\"use strict\";var i=r(\"B3Rj\"),n=r(\"hwdV\").Buffer;e.exports=function(e){function t(t){var r=t.slice(0,-4),i=t.slice(-4),n=e(r);if(!(i[0]^n[0]|i[1]^n[1]|i[2]^n[2]|i[3]^n[3]))return r}return{encode:function(t){var r=e(t);return i.encode(n.concat([t,r],t.length+4))},decode:function(e){var r=t(i.decode(e));if(!r)throw new Error(\"Invalid checksum\");return r},decodeUnsafe:function(e){var r=i.decodeUnsafe(e);if(r)return t(r)}}}},QqcV:function(e,t,r){\"use strict\";var i=r(\"hwdV\").Buffer;e.exports=function(e){if(e.length>=255)throw new TypeError(\"Alphabet too long\");for(var t=new Uint8Array(256),r=0;r<t.length;r++)t[r]=255;for(var n=0;n<e.length;n++){var o=e.charAt(n),a=o.charCodeAt(0);if(255!==t[a])throw new TypeError(o+\" is ambiguous\");t[a]=n}var c=e.length,s=e.charAt(0),p=Math.log(c)/Math.log(256),u=Math.log(256)/Math.log(c);function h(e){if(\"string\"!=typeof e)throw new TypeError(\"Expected String\");if(0===e.length)return i.alloc(0);var r=0;if(\" \"!==e[r]){for(var n=0,o=0;e[r]===s;)n++,r++;for(var a=(e.length-r)*p+1>>>0,u=new Uint8Array(a);e[r];){var h=t[e.charCodeAt(r)];if(255===h)return;for(var f=0,d=a-1;(0!==h||f<o)&&-1!==d;d--,f++)u[d]=(h+=c*u[d]>>>0)%256>>>0,h=h/256>>>0;if(0!==h)throw new Error(\"Non-zero carry\");o=f,r++}if(\" \"!==e[r]){for(var l=a-o;l!==a&&0===u[l];)l++;var y=i.allocUnsafe(n+(a-l));y.fill(0,0,n);for(var v=n;l!==a;)y[v++]=u[l++];return y}}}return{encode:function(t){if((Array.isArray(t)||t instanceof Uint8Array)&&(t=i.from(t)),!i.isBuffer(t))throw new TypeError(\"Expected Buffer\");if(0===t.length)return\"\";for(var r=0,n=0,o=0,a=t.length;o!==a&&0===t[o];)o++,r++;for(var p=(a-o)*u+1>>>0,h=new Uint8Array(p);o!==a;){for(var f=t[o],d=0,l=p-1;(0!==f||d<n)&&-1!==l;l--,d++)h[l]=(f+=256*h[l]>>>0)%c>>>0,f=f/c>>>0;if(0!==f)throw new Error(\"Non-zero carry\");n=d,o++}for(var y=p-n;y!==p&&0===h[y];)y++;for(var v=s.repeat(r);y<p;++y)v+=e.charAt(h[y]);return v},decodeUnsafe:h,decode:function(e){var t=h(e);if(t)return t;throw new Error(\"Non-base\"+c+\" character\")}}}},b3gk:function(e,t,r){\"use strict\";var i=r(\"mObS\"),n=r(\"BumV\");e.exports=n(function(e){var t=i(\"sha256\").update(e).digest();return i(\"sha256\").update(t).digest()})},vUa2:function(e,t,r){var i=r(\"9lTW\"),n=r(\"hwdV\").Buffer,o=r(8),a=r(\"b3gk\"),c=r(\"IzB8\"),s=n.from(\"Bitcoin seed\",\"utf8\"),p=2147483648,u={private:76066276,public:76067358};function h(e){this.versions=e||u,this.depth=0,this.index=0,this._privateKey=null,this._publicKey=null,this.chainCode=null,this._fingerprint=0,this.parentFingerprint=0}function f(e,t,r){var i=n.allocUnsafe(78);return i.writeUInt32BE(t,0),i.writeUInt8(e.depth,4),i.writeUInt32BE(e.depth?e.parentFingerprint:0,5),i.writeUInt32BE(e.index,9),e.chainCode.copy(i,13),r.copy(i,45),i}function d(e){var t=o.createHash(\"sha256\").update(e).digest();return o.createHash(\"ripemd160\").update(t).digest()}Object.defineProperty(h.prototype,\"fingerprint\",{get:function(){return this._fingerprint}}),Object.defineProperty(h.prototype,\"identifier\",{get:function(){return this._identifier}}),Object.defineProperty(h.prototype,\"pubKeyHash\",{get:function(){return this.identifier}}),Object.defineProperty(h.prototype,\"privateKey\",{get:function(){return this._privateKey},set:function(e){i.equal(e.length,32,\"Private key must be 32 bytes.\"),i(!0===c.privateKeyVerify(e),\"Invalid private key\"),this._privateKey=e,this._publicKey=n.from(c.publicKeyCreate(e,!0)),this._identifier=d(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0)}}),Object.defineProperty(h.prototype,\"publicKey\",{get:function(){return this._publicKey},set:function(e){i(33===e.length||65===e.length,\"Public key must be 33 or 65 bytes.\"),i(!0===c.publicKeyVerify(e),\"Invalid public key\"),this._publicKey=n.from(c.publicKeyConvert(e,!0)),this._identifier=d(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0),this._privateKey=null}}),Object.defineProperty(h.prototype,\"privateExtendedKey\",{get:function(){return this._privateKey?a.encode(f(this,this.versions.private,n.concat([n.alloc(1,0),this.privateKey]))):null}}),Object.defineProperty(h.prototype,\"publicExtendedKey\",{get:function(){return a.encode(f(this,this.versions.public,this.publicKey))}}),h.prototype.derive=function(e){if(\"m\"===e||\"M\"===e||\"m'\"===e||\"M'\"===e)return this;var t=e.split(\"/\"),r=this;return t.forEach(function(e,t){if(0!==t){var n=e.length>1&&\"'\"===e[e.length-1],o=parseInt(e,10);i(o<p,\"Invalid index\"),n&&(o+=p),r=r.deriveChild(o)}else i(/^[mM]{1}/.test(e),'Path must start with \"m\" or \"M\"')}),r},h.prototype.deriveChild=function(e){var t,r=e>=p,a=n.allocUnsafe(4);if(a.writeUInt32BE(e,0),r){i(this.privateKey,\"Could not derive hardened child key\");var s=this.privateKey,u=n.alloc(1,0);s=n.concat([u,s]),t=n.concat([s,a])}else t=n.concat([this.publicKey,a]);var f=o.createHmac(\"sha512\",this.chainCode).update(t).digest(),d=f.slice(0,32),l=f.slice(32),y=new h(this.versions);if(this.privateKey)try{y.privateKey=n.from(c.privateKeyTweakAdd(n.from(this.privateKey),d))}catch(v){return this.deriveChild(e+1)}else try{y.publicKey=n.from(c.publicKeyTweakAdd(n.from(this.publicKey),d,!0))}catch(v){return this.deriveChild(e+1)}return y.chainCode=l,y.depth=this.depth+1,y.parentFingerprint=this.fingerprint,y.index=e,y},h.prototype.sign=function(e){return n.from(c.ecdsaSign(e,this.privateKey).signature)},h.prototype.verify=function(e,t){return c.ecdsaVerify(Uint8Array.from(t),Uint8Array.from(e),Uint8Array.from(this.publicKey))},h.prototype.wipePrivateData=function(){return this._privateKey&&o.randomBytes(this._privateKey.length).copy(this._privateKey),this._privateKey=null,this},h.prototype.toJSON=function(){return{xpriv:this.privateExtendedKey,xpub:this.publicExtendedKey}},h.fromMasterSeed=function(e,t){var r=o.createHmac(\"sha512\",s).update(e).digest(),i=r.slice(0,32),n=r.slice(32),a=new h(t);return a.chainCode=n,a.privateKey=i,a},h.fromExtendedKey=function(e,t){var r=new h(t=t||u),n=a.decode(e),o=n.readUInt32BE(0);i(o===t.private||o===t.public,\"Version mismatch: does not match private or public\"),r.depth=n.readUInt8(4),r.parentFingerprint=n.readUInt32BE(5),r.index=n.readUInt32BE(9),r.chainCode=n.slice(13,45);var c=n.slice(45);return 0===c.readUInt8(0)?(i(o===t.private,\"Version mismatch: version does not match private\"),r.privateKey=c.slice(1)):(i(o===t.public,\"Version mismatch: version does not match public\"),r.publicKey=c),r},h.fromJSON=function(e){return h.fromExtendedKey(e.xpriv)},h.HARDENED_OFFSET=p,e.exports=h}}]);","name":"22.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[22,44],{\n\n/***/ 8:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"B3Rj\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar basex = __webpack_require__(\"QqcV\")\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n\n\n/***/ }),\n\n/***/ \"BumV\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar base58 = __webpack_require__(\"B3Rj\")\nvar Buffer = __webpack_require__(\"hwdV\").Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n\n\n/***/ }),\n\n/***/ \"QqcV\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = __webpack_require__(\"hwdV\").Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n\n\n/***/ }),\n\n/***/ \"b3gk\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar createHash = __webpack_require__(\"mObS\")\nvar bs58checkBase = __webpack_require__(\"BumV\")\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n\n\n/***/ }),\n\n/***/ \"vUa2\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar assert = __webpack_require__(\"9lTW\")\nvar Buffer = __webpack_require__(\"hwdV\").Buffer\nvar crypto = __webpack_require__(8)\nvar bs58check = __webpack_require__(\"b3gk\")\nvar secp256k1 = __webpack_require__(\"IzB8\")\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n\n\n/***/ })\n\n}]);","inputSourceMap":null}